{"version":3,"sources":["components/Jumbotron/index.js","components/Nav/index.js","components/Input/index.js","components/Button/index.js","components/SaveBtn/index.js","utils/API.js","components/Grid/index.js","components/BookList/index.js","pages/Books.js","App.js","registerServiceWorker.js","index.js"],"names":["Jumbotron","className","Nav","href","Input","props","type","Button","children","onClick","join","SaveBtn","query","axios","get","bookData","console","log","post","Container","fluid","Row","Col","size","split","map","BookList","BookListItem","authors","description","image","title","alt","src","rel","target","Books","state","result","bookSearch","loadBooks","API","then","res","setState","data","catch","err","handleInputChange","event","name","value","handleFormSubmit","preventDefault","handleSaveBook","id","book","items","find","key","volumeInfo","imageLinks","smallThumbnail","link","infoLink","this","onChange","placeholder","Component","App","exact","path","component","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","error","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","fetch","response","status","headers","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.adf4cb61.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./style.css\";\n\nfunction Jumbotron() {\n  return (\n    <div className=\"jumbotron text-center\">\n      <h1>Books!</h1>\n    </div>\n  );\n}\n\nexport default Jumbotron;\n","import React from \"react\";\n\nfunction Nav() {\n  return (\n    <nav className=\"navbar navbar-expand-lg navbar-dark bg-primary\">\n      <a className=\"navbar-brand\" href=\"/\">\n        Books!\n      </a>\n    </nav>\n  );\n}\n\nexport default Nav;\n","import React from \"react\";\n\n// This component lets us use a bootstrap input element without worrying about class names\n// or manually wrapping the input with a form-group div\n// All of the props passed to this component are spread onto the input element\nfunction Input(props) {\n  return (\n    <div className=\"input-group input-group-lg\">\n      <input className=\"form-control\" type=\"text\" {...props} />\n    </div>\n  );\n}\n\nexport default Input;\n","import React from \"react\";\n\n// Destructuring the type, className, children and onClick props, applying them to the button element\nfunction Button({ type = \"default\", className, children, onClick }) {\n  return (\n    <button onClick={onClick} className={[\"btn btn-lg\", `btn-${type}`, className].join(\" \")}>\n      {children}\n    </button>\n  );\n}\n\nexport default Button;\n","import React from \"react\";\n\n// The ...props means, spread all of the passed props onto this element\n// That way we don't have to define them all individually\nfunction SaveBtn(props) {\n  return (\n    <button type=\"button\" className=\"btn btn-info\" {...props}>\n      Save Book\n    </button>\n  );\n}\n\nexport default SaveBtn;\n","import axios from \"axios\";\nconst BASEURL = \"https://www.googleapis.com/books/v1/volumes?q=\";\n// const APIKEY =\n\n// This method retrieves books from the server\n// It accepts a \"query\" or term to search the api for\n\nexport default {\n  //Gets all books from googlebooks\n  getSearchedBook: function (query) {\n    return axios.get(BASEURL + query);\n  },\n  //saves a book to the database\n  saveBook: function (bookData) {\n    console.log(bookData);\n\n    return axios.post(\"/api/books\", bookData);\n  },\n};\n","import React from \"react\";\n\n// Exporting the Container, Row, and Col components from this file\n\n// This Container component allows us to use a bootstrap container without worrying about class names\nexport function Container({ fluid, children }) {\n  return <div className={`container${fluid ? \"-fluid\" : \"\"}`}>{children}</div>;\n}\n\n// This Row component lets us use a bootstrap row without having to think about class names\nexport function Row({ fluid, children }) {\n  return <div className={`row${fluid ? \"-fluid\" : \"\"}`}>{children}</div>;\n}\n\n// This Col component lets us size bootstrap columns with less syntax\n// e.g. <Col size=\"md-12\"> instead of <div className=\"col-md-12\">\nexport function Col({ size, children }) {\n  return (\n    <div\n      className={size\n        .split(\" \")\n        .map(size => \"col-\" + size)\n        .join(\" \")}\n    >\n      {children}\n    </div>\n  );\n}\n","import React from \"react\";\nimport { Container, Row, Col } from \"../Grid\";\n\n//exporting the BookList and BookListItem from this file\n\n// BookList renders a bootstrap list item\nexport function BookList({ children }) {\n  return <ul className=\"list-group\">{children}</ul>;\n}\n\n// BookListItem renders a bootstrap list item containing data from the google books api call\nexport function BookListItem({ authors, description, image, href, title }) {\n  return (\n    <li className=\"list-group-item\">\n      <Container>\n        <Row>\n          <Col size=\"xs-8 sm-9\">\n            <h6>Authors: {authors}</h6>\n          </Col>\n          <Col size=\"xs-8 sm-9\">\n            <h6>Description: {description}</h6>\n          </Col>\n          <Col size=\"xs-4 sm-2\">\n            <img alt=\"\" src={image} />\n          </Col>\n          <Col size=\"xs-8 sm-9\">\n            <h5>{title}</h5>\n            <a rel=\"noreferrer noopener\" target=\"_blank\" href={href}>\n              Check out the book!\n            </a>\n          </Col>\n        </Row>\n      </Container>\n    </li>\n  );\n}\n","import React, { Component } from \"react\";\nimport Jumbotron from \"../components/Jumbotron\";\nimport Nav from \"../components/Nav\";\nimport Input from \"../components/Input\";\nimport Button from \"../components/Button\";\nimport SaveBtn from \"../components/SaveBtn\";\nimport API from \"../utils/API\";\nimport { Container, Row, Col } from \"../components/Grid\";\nimport { BookList, BookListItem } from \"../components/BookList\";\n\nclass Books extends Component {\n  state = {\n    result: [],\n    bookSearch: \"\",\n  };\n\n  componentDidMount() {\n    this.loadBooks(\"Ready Player One\");\n  }\n\n  loadBooks = (query) => {\n    const q = query ? query : \"\";\n    API.getSearchedBook(q)\n      .then((res) =>\n        this.setState({\n          result: res.data,\n        })\n      )\n      .catch((err) => console.log(err));\n  };\n\n  handleInputChange = (event) => {\n    const { name, value } = event.target;\n    this.setState({\n      [name]: value,\n    });\n  };\n\n  handleFormSubmit = (event) => {\n    event.preventDefault();\n    this.loadBooks(this.state.bookSearch);\n  };\n\n  handleSaveBook = (id) => {\n    const book = this.state.result.items.find((book) => book.id === id);\n\n    API.saveBook({\n      key: book.id,\n      title: book.volumeInfo.title,\n      authors: book.volumeInfo.authors,\n      description: book.volumeInfo.description,\n      image: book.volumeInfo.imageLinks.smallThumbnail,\n      link: book.volumeInfo.infoLink,\n    });\n  };\n\n  render() {\n    return (\n      <div>\n        <Nav />\n        <Jumbotron />\n        <Container>\n          <Row>\n            <Col size=\"md-8\">\n              <form>\n                <Container>\n                  <Row>\n                    <Col size=\"xs-9 sm-10\">\n                      <Input\n                        name=\"bookSearch\"\n                        value={this.state.bookSearch}\n                        onChange={this.handleInputChange}\n                        placeholder=\"Search For a Book\"\n                      />\n                    </Col>\n                    <Col size=\"xs-3 sm-2\">\n                      <Button\n                        onClick={this.handleFormSubmit}\n                        type=\"success\"\n                        className=\"input-lg\"\n                      >\n                        Search\n                      </Button>\n                    </Col>\n                  </Row>\n                </Container>\n              </form>\n            </Col>\n          </Row>\n          <Row>\n            <Col size=\"xs-12\">\n              {!this.state.result.items ? (\n                <h2 className=\"text-center\">No Books to Display</h2>\n              ) : (\n                <BookList>\n                  {this.state.result.items.map((book) => {\n                    return (\n                      <div>\n                        <BookListItem\n                          key={book.id}\n                          title={book.volumeInfo.title}\n                          href={book.volumeInfo.infoLink}\n                          authors={book.volumeInfo.authors}\n                          description={book.volumeInfo.description}\n                          image={book.volumeInfo.imageLinks.smallThumbnail}\n                        />\n                        <SaveBtn\n                          onClick={() => this.handleSaveBook(book.id)}\n                        ></SaveBtn>\n                        <hr></hr>\n                      </div>\n                    );\n                  })}\n                </BookList>\n              )}\n            </Col>\n          </Row>\n        </Container>\n      </div>\n    );\n  }\n}\n\nexport default Books;\n","import React from \"react\";\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\nimport Books from \"./pages/Books\";\n// import Saved from \"./pages/Saved\";\n\nfunction App() {\n  return (\n    <>\n      <Router>\n        <div>\n          <Route exact path=\"/\" component={Books} />\n          {/* <Route exact path=\"/saved\" component={Saved} /> */}\n        </div>\n      </Router>\n    </>\n  );\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (!isLocalhost) {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      } else {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log(\"New content is available; please refresh.\");\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get(\"content-type\").indexOf(\"javascript\") === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport registerServiceWorker from \"./registerServiceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\nregisterServiceWorker();\n"],"sourceRoot":""}